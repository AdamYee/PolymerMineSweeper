{"version":3,"sources":["../src/board.js"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["'use strict';\r\nvar PlayMS = Polymer({\r\n  is: 'ms-board',\r\n  properties: {\r\n    rows:           Number,\r\n    columns:        Number,\r\n    mines:          Number,\r\n    flagCount:      { type: Number, value: 0 },\r\n    gameOver:       { type: Boolean, value: false },\r\n    win:            { type: Boolean, value: false },\r\n    doneExploding:  { type: Boolean, value: false },\r\n    grid: Object,\r\n\r\n    alreadyRevealed: {\r\n      type: Object,\r\n      value: function() { return {}; }\r\n    },\r\n    _gameEndMessage: {\r\n      type: String, computed: 'computedEndMessage(win)'\r\n    },\r\n    _gameEndCss: {\r\n      type: String, computed: 'computedEndCss(doneExploding, win)'\r\n    },\r\n    _gameEndColor: {\r\n      type: String, computed: 'computedEndColor(win)'\r\n    }\r\n  },\r\n  computedEndMessage(win) {\r\n    return win ? 'YOU WIN' : 'GAME OVER';\r\n  },\r\n  computedEndCss(doneExploding, win) {\r\n    if(doneExploding || win) {\r\n      Polymer.dom(this.$['game-end']).classList.add('show');\r\n    } else {\r\n      Polymer.dom(this.$['game-end']).classList.remove('show');\r\n    }\r\n  },\r\n  computedEndColor(win) {\r\n    return 'color:' + (win ? 'green' : 'red');\r\n  },\r\n  /**\r\n   * IMPORTANT: Attributes configured via an element e.g. <x-foo name=\"bar\"></x-foo>\r\n   * are not available in the `created`lifecycle method. They first become available\r\n   * in the `ready` lifecycle method.\r\n   */\r\n  ready() {\r\n    this.isPlaying = false;\r\n  },\r\n  play() {\r\n    this.gameOver = this.win = this.doneExploding = false;\r\n    this.flagCount = 0;\r\n    this.grid = new MSPolymer.Grid(this.rows, this.columns, this.mines);\r\n    if (this.isPlaying) {\r\n      for (let i = 0; i < this.rows; i++) {\r\n        for (let j = 0; j < this.columns; j++) {\r\n          let cell = Polymer.dom(this.$.board).querySelector(`#cid_${i}_${j}`);\r\n          if (cell) {\r\n            cell.reset();\r\n          }\r\n        }\r\n      }\r\n      this.alreadyRevealed = {};\r\n    }\r\n    this.isPlaying = true;\r\n  },\r\n  flaggedHandler(e) {\r\n    this.flagCount += e.detail; // 1 or -1\r\n    this.checkWin();\r\n  },\r\n  checkWin() {\r\n    this.win = this.grid.hasWon();\r\n    if (this.win) {\r\n      this.gameOver = true;\r\n    }\r\n  },\r\n  /**\r\n   * Recursively self reveals cells as 0 risk cells are revealed.\r\n   * Recursion is oddly handled through animation. See `propagate` on ms-cell.html.\r\n   */\r\n  revealNeighbors(e) {\r\n    \r\n    let position = e.target.id.split('_').slice(-2); // get grid position from id\r\n    let row = parseInt(position[0]);\r\n    let col = parseInt(position[1]);\r\n    let revealNeighbor = this.grid.forEachSurroudingCell(row, col);\r\n    revealNeighbor((r, c) => {\r\n      if(this.alreadyRevealed.hasOwnProperty(`#cid_${r}_${c}`)) {\r\n        return;\r\n      }\r\n      this.alreadyRevealed[`#cid_${r}_${c}`] = true;\r\n      /**\r\n       * Common Polymer gotcha:\r\n       * Automatic node finding only works 1 level deep in the shadow DOM tree.\r\n       * Anything deeper can be accessed by using `querySelector` on an\r\n       * automatically found node.\r\n       */\r\n      let neighbor = Polymer.dom(this.$.board).querySelector(`#cid_${r}_${c}`);\r\n      if (!neighbor.cell.flagged) {\r\n        neighbor.revealed = true; // recursion via data-binding\r\n      }\r\n    }, this);\r\n  },\r\n  /**\r\n   * As soon as any mine explodes, this method fires off the rest\r\n   * to make it a board-wide explosion.\r\n   */\r\n  createExplosion(e) {\r\n    this.gameOver = true;\r\n\r\n    let unflaggedMines = 0;\r\n    let explodedCount = 0;\r\n    let mineCellIds = this.grid.mineArray.map((id) => `#${id}`).join(',');\r\n    let minesArr = Array.from(Polymer.dom(this.$.board).querySelectorAll(mineCellIds));\r\n    minesArr = shuffleArray(minesArr); // shuffle the mines for a random explosion effect\r\n\r\n    // know when to show the game over message - after we're done exploding\r\n    let explode = (e) => {\r\n      if (e.animationName.includes('explode')) {\r\n        explodedCount++;\r\n        if (explodedCount === unflaggedMines) {\r\n          this.doneExploding = true\r\n          this.removeEventListener('webkitAnimationEnd', explode);\r\n          this.removeEventListener('MSAnimationEnd', explode);\r\n          this.removeEventListener('animationend', explode);\r\n        }\r\n      }\r\n    };\r\n    this.addEventListener('webkitAnimationEnd', explode);\r\n    this.addEventListener('MSAnimationEnd', explode);\r\n    this.addEventListener('animationend', explode);\r\n\r\n    minesArr.forEach((cell, i) => {\r\n      setTimeout(() => {\r\n        if (!cell.cell.flagged) {\r\n          unflaggedMines++;\r\n          cell.revealed = true; // explode unflagged mines\r\n        }\r\n      }, i % 2 === 0 ? i * 15 : i * 12);\r\n    });\r\n  }\r\n});\r\n\r\n/*\r\nUtils\r\n */\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n"]}